use codespan::FileMap;
use codespan::{ByteIndex, ByteSpan};
use num_bigint::BigInt;
use num_traits::ToPrimitive;

use syntax::concrete::{
    Definition, Exposing, Item, Literal, Module, Pattern, StructTypeField, StructField, Term,
    ReplCommand,
};
use syntax::parse::{LalrpopError, ParseError, Token};
use syntax::{FloatFormat, IntFormat};

#[LALR]
grammar<'err, 'input>(errors: &'err mut Vec<ParseError>, filemap: &'input FileMap);

extern {
    type Location = ByteIndex;
    type Error = ParseError;

    enum Token<&'input str> {
        // Data
        "identifier" => Token::Ident(<&'input str>),
        "doc comment" => Token::DocComment(<&'input str>),
        "REPL command" => Token::ReplCommand(<&'input str>),
        "string literal" => Token::StringLiteral(<String>),
        "character literal" => Token::CharLiteral(<char>),
        "binary literal" => Token::BinIntLiteral(<BigInt>),
        "octal literal" => Token::OctIntLiteral(<BigInt>),
        "decimal literal" => Token::DecIntLiteral(<BigInt>),
        "hex literal" => Token::HexIntLiteral(<BigInt>),
        "float literal" => Token::DecFloatLiteral(<f64>),

        // Keywords
        "as" => Token::As,
        "match" => Token::Match,
        "else" => Token::Else,
        "extern" => Token::Extern,
        "if" => Token::If,
        "in" => Token::In,
        "int" => Token::Int,
        "let" => Token::Let,
        "module" => Token::Module,
        "import" => Token::Import,
        "struct" => Token::Struct,
        "Type" => Token::Type,

        // Symbols
        "*" => Token::Asterisk,
        "\\" => Token::BSlash,
        ":" => Token::Colon,
        "," => Token::Comma,
        "." => Token::Dot,
        ".." => Token::DotDot,
        "=" => Token::Equal,
        "/" => Token::FSlash,
        "-" => Token::Hyphen,
        "->" => Token::LArrow,
        "=>" => Token::LFatArrow,
        "+" => Token::Plus,
        ";" => Token::Semi,

        // Delimiters
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
    }
}

pub ReplCommand: ReplCommand = {
    => ReplCommand::NoOp,
    <term: Term> => ReplCommand::Eval(Box::new(term)),
    <start: @L> <command: "REPL command"> <end: @R> =>? match command {
        "?" | "h" | "help" => Ok(ReplCommand::Help),
        "q" | "quit" => Ok(ReplCommand::Quit),
        command => {
            let span = ByteSpan::new(start, end);
            let command = command.to_owned();
            Err(LalrpopError::User { error: ParseError::UnknownReplCommand { span, command} })
        },
    },
    <start: @L> <command: "REPL command"> <end: @R> <term: Term> =>? match command {
        "raw" => Ok(ReplCommand::Raw(Box::new(term))),
        "core" => Ok(ReplCommand::Core(Box::new(term))),
        "t" | "type" => Ok(ReplCommand::TypeOf(Box::new(term))),
        command => {
            let span = ByteSpan::new(start, end);
            let command = command.to_owned();
            Err(LalrpopError::User { error: ParseError::UnknownReplCommand { span, command} })
        },
    },
    <start: @L> <command: "REPL command"> <end: @R> <ident: Ident> "=" <term: Term> =>? match command {
        "let" => Ok(ReplCommand::Let(ident, Box::new(term))),
        command => {
            let span = ByteSpan::new(start, end);
            let command = command.to_owned();
            Err(LalrpopError::User { error: ParseError::UnknownReplCommand { span, command} })
        },
    },
};

pub Module: Module = {
    <_comment: "doc comment"*> "module" <name: IndexedIdent> ";" <items: Item*> => {
        Module::Valid { name, items }
    },
};

Item: Item = {
    <start: @L> "import" <name: IndexedIdent> <rename: ("as" <IndexedIdent>)?>
        <exposing: Exposing?> <end: @R> ";" =>
    {
        Item::Import { span: ByteSpan::new(start, end), name, rename, exposing }
    },
    <_comment: "doc comment"*> <name: IndexedIdent> ":" <ann: Term> ";" => {
        Item::Declaration { name, ann }
    },
    <_comment: "doc comment"*> <name: IndexedIdent> <params: AtomicLamParam*> <return_ann: (":" <Term>)?> "="
        <term: Term> ";" =>
    {
        let return_ann = return_ann.map(Box::new);
        Item::Definition(Definition::Alias { name, params, return_ann, term })
    },
    <_comment: "doc comment"*> <start: @L> "struct" <name: IndexedIdent> <params: ("(" <Ident> ":" <Term> ")")*>
        "{" <fields: (<StructTypeField> ",")*> <last: StructTypeField?> "}" <end: @R> ";" =>
    {
        let span = ByteSpan::new(start, end);
        let mut fields = fields;
        fields.extend(last);
        Item::Definition(Definition::StructType { span, name, params, fields })
    },
    <start: @L> <recovered: !> <end: @R> ";" => {
        errors.push(super::errors::from_lalrpop(filemap, recovered.error));
        Item::Error(ByteSpan::new(start, end))
    },
};

Exposing : Exposing = {
    <start: @L> "(" ".." ")" <end: @R> => Exposing::All(ByteSpan::new(start, end)),
    <start: @L> "(" <names: (<ExposedIdent> ",")*> <last: ExposedIdent> <end: @R> => {
        let mut names = names;
        names.push(last);
        Exposing::Exact(ByteSpan::new(start, end), names)
    },
    <start: @L> <recovered: !> <end: @R> => {
        errors.push(super::errors::from_lalrpop(filemap, recovered.error));
        Exposing::Error(ByteSpan::new(start, end))
    },
};

ExposedIdent : ((ByteIndex, String), Option<(ByteIndex, String)>) = {
    <IndexedIdent> <("as" <IndexedIdent>)?>,
};

Literal: Literal = {
    <start: @L> <value: "string literal"> <end: @R> => Literal::String(ByteSpan::new(start, end), value),
    <start: @L> <value: "character literal"> <end: @R> => Literal::Char(ByteSpan::new(start, end), value),
    <start: @L> <value: "binary literal"> <end: @R> => Literal::Int(ByteSpan::new(start, end), value, IntFormat::Bin),
    <start: @L> <value: "octal literal"> <end: @R> => Literal::Int(ByteSpan::new(start, end), value, IntFormat::Oct),
    <start: @L> <value: "decimal literal"> <end: @R> => Literal::Int(ByteSpan::new(start, end), value, IntFormat::Dec),
    <start: @L> <value: "hex literal"> <end: @R> => Literal::Int(ByteSpan::new(start, end), value, IntFormat::Hex),
    <start: @L> <value: "float literal"> <end: @R> => Literal::Float(ByteSpan::new(start, end), value, FloatFormat::Dec),
};

pub Pattern: Pattern = {
    AtomicPattern,
    <pattern: Pattern> ":" <ty: LamTerm> => {
        Pattern::Ann(Box::new(pattern), Box::new(ty))
    }
};

AtomicPattern : Pattern = {
    <start: @L> "(" <pattern: Pattern> ")" <end: @R> => {
        Pattern::Parens(ByteSpan::new(start, end), Box::new(pattern))
    },
    <literal: Literal> => Pattern::Literal(literal),
    <start: @L> <ident: Ident> => Pattern::Name(start, ident),
    <start: @L> <recovered: !> <end: @R> => {
        errors.push(super::errors::from_lalrpop(filemap, recovered.error));
        Pattern::Error(ByteSpan::new(start, end))
    },
}

pub Term: Term = {
    LamTerm,
    <expr: LamTerm> ":" <ty: Term> => {
        Term::Ann(Box::new(expr), Box::new(ty))
    },
};

LamTerm: Term = {
    PiTerm,
    <start: @L> "extern" <name_start: @L> <name: "string literal"> <end: @R> => {
        Term::Extern(ByteSpan::new(start, end), ByteSpan::new(name_start, end), name)
    },
    <start: @L> "\\" <name: IndexedIdent> ":" <ann: PiTerm> "=>" <body: LamTerm> => {
        Term::Lam(start, vec![(vec![name], Some(Box::new(ann)))], Box::new(body))
    },
    <start: @L> "\\" <params: AtomicLamParam+> "=>" <body: LamTerm> => {
        Term::Lam(start, params, Box::new(body))
    },
    <start: @L> "if" <cond: AppTerm> "{" <if_true: AppTerm> "}" "else" "{" <if_false: AppTerm> "}" <end: @R> => {
        Term::If(ByteSpan::new(start, end), Box::new(cond), Box::new(if_true), Box::new(if_false))
    },
    <start: @L> "match" <head: Term> "{" <arms: (<PatternArm> ",")*> <last: PatternArm?> "}" <end: @R> => {
        let mut arms = arms;
        arms.extend(last);
        Term::Match(ByteSpan::new(start, end), Box::new(head), arms)
    },
    <start: @L> "let" <items: Item+> "in" <body: LamTerm> => {
        Term::Let(start, items, Box::new(body))
    },
};

PiTerm: Term = {
    AppTerm,
    // Naively we would want to write the following rules:
    //
    // ```lalrpop
    // <params: ("(" <IndexedIdent+> ":" <PiTerm> ")")+> "->" <body: LamTerm> => {
    //      Term::Pi(params, Box::new(body))
    //  },
    //  <ann: AppTerm> "->" <body: LamTerm> => {
    //      Term::Arrow(Box::new(ann), Box::new(body))
    //  },
    // ```
    //
    // Alas this causes an ambiguity with the `AtomicTerm` rule. Therefore we
    // have to hack this in by reparsing the binder:
    <start: @L> <binder: AppTerm> "->" <body: LamTerm> <end: @R> =>? {
        super::reparse_pi_type_hack(ByteSpan::new(start, end), binder, body)
    },
};

AppTerm: Term = {
    AtomicTerm,
    <f: AtomicTerm> <args: AtomicTerm+> =>? {
        if let (&Term::Universe(s1, None), &Term::Literal(Literal::Int(s2, ref value, IntFormat::Dec))) = (&f, &args[0]) {
            return match value.to_u32() {
                Some(value) => Ok(Term::Universe(s1.to(s2), Some(value))),
                None => Err(LalrpopError::User {
                    error: ParseError::IntegerLiteralOverflow {
                        span: s2,
                        value: value.clone(),
                    },
                }),
            };
        }

        Ok(Term::App(Box::new(f), args))
    },
};

AtomicTerm: Term = {
    <start: @L> "(" <term: Term> ")" <end: @R> => Term::Parens(ByteSpan::new(start, end), Box::new(term)),
    <start: @L> "Type" <end: @R> => Term::Universe(ByteSpan::new(start, end), None),
    <start: @L> "int" "{" <min: Term?> ".." <max: Term?> "}" <end: @R> => {
        Term::IntType(ByteSpan::new(start, end), min.map(Box::new), max.map(Box::new))
    },
    <start: @L> "int" "{" "=" <value: Term> "}" <end: @R> => {
        Term::IntTypeSingleton(ByteSpan::new(start, end), Box::new(value))
    },
    <literal: Literal> => Term::Literal(literal),
    <start: @L> "[" <elems: (<Term> ",")*> <last: Term?> "]" <end: @R> => {
        let mut elems = elems;
        elems.extend(last);
        Term::Array(ByteSpan::new(start, end), elems)
    },
    <start: @L> <ident: Ident> <end: @R> => {
        if ident == "_" {
            Term::Hole(ByteSpan::new(start, end))
        } else {
            Term::Name(start, ident)
        }
    },
    <start: @L> "struct" "{" <fields: (<StructField> ",")*> <last: StructField?> "}" <end: @R> => {
        let mut fields = fields;
        fields.extend(last);
        Term::Struct(ByteSpan::new(start, end), fields)
    },
    <term: AtomicTerm> "." <label_start: @L> <label: Ident> => {
        Term::Proj(Box::new(term), label_start, label)
    },
    <start: @L> <recovered: !> <end: @R> => {
        errors.push(super::errors::from_lalrpop(filemap, recovered.error));
        Term::Error(ByteSpan::new(start, end))
    },
};

AtomicLamParam: (Vec<(ByteIndex, String)>, Option<Box<Term>>) = {
    <name: IndexedIdent> => (vec![name], None),
    "(" <names: IndexedIdent+> <ann: (":" <PiTerm>)?> ")" => (names, ann.map(Box::new)),
};

StructTypeField: StructTypeField = {
    <_comment: "doc comment"*> <label: IndexedIdent> <binder: ("as" <IndexedIdent>)?> ":" <ann: Term> => {
        StructTypeField { label, binder, ann }
    },
};

PatternArm: (Pattern, Term) = {
    <Pattern> "=>" <Term>,
};

StructField: StructField = {
    <start: @L> <label: IndexedIdent>"=" <term: Term> => {
        StructField { label, term }
    },
};

IndexedIdent: (ByteIndex, String) = {
    <start: @L> <ident: Ident> => (start, ident),
};

Ident: String = {
    "identifier" => (<>).to_owned()
};
